'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2018-present The Palmer Group
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   */

exports.cleanupDiffOutputCommand = cleanupDiffOutputCommand;
exports.matchImageSnapshotCommand = matchImageSnapshotCommand;
exports.addMatchImageSnapshotCommand = addMatchImageSnapshotCommand;
exports.addCleanupDiffOutputCommand = addCleanupDiffOutputCommand;

var _constants = require('./constants');

const screenshotsFolder = Cypress.config('screenshotsFolder');
const updateSnapshots = Cypress.env('updateSnapshots') || false;

let matchImageSnapshotCommandOptions;

function cleanupDiffOutputCommand() {
  return function cleanupDiffOutput() {
    return cy.task(_constants.CLEANUP, {
      specPath: Cypress.spec.absolute,
      screenshotsFolder,
      matchImageSnapshotCommandOptions
    });
  };
}

function matchImageSnapshotCommand(defaultOptions) {
  return function matchImageSnapshot(subject, maybeName, commandOptions) {
    const options = _extends({}, defaultOptions, (typeof maybeName === 'string' ? commandOptions : maybeName) || {});

    cy.task(_constants.MATCH, {
      screenshotsFolder,
      updateSnapshots,
      options
    });

    const name = typeof maybeName === 'string' ? maybeName : undefined;
    const target = subject ? cy.wrap(subject) : cy;
    target.screenshot(name, options);

    return cy.task(_constants.RECORD);
  };
}

function addMatchImageSnapshotCommand(maybeName = 'matchImageSnapshot', maybeOptions = {
  failureThreshold: 0.0001, // threshold for entire image
  failureThresholdType: 'percent', // percent of image or number of pixels
  customDiffConfig: { threshold: 0.01 }, // threshold for each pixel
  capture: 'viewport' // capture viewport in screenshot
}) {
  const options = typeof maybeName === 'string' ? maybeOptions : maybeName;
  const name = typeof maybeName === 'string' ? maybeName : 'matchImageSnapshot';

  // save these off so cleanupDiffOutputCommand can use them.
  matchImageSnapshotCommandOptions = options;

  Cypress.Commands.add(name, {
    prevSubject: ['optional', 'element', 'window', 'document']
  }, matchImageSnapshotCommand(options));
}

function addCleanupDiffOutputCommand(maybeName = 'cleanupDiffOutput') {
  const name = typeof maybeName === 'string' ? maybeName : 'cleanupDiffOutput';
  Cypress.Commands.add(name, false, cleanupDiffOutputCommand());
}